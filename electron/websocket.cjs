const { app, ipcMain } = require('electron');
const WebSocket = require('ws');
const Logger = require('./logger.cjs');
const { WS_URL, COMPUTER_NAME } = require('./constants.cjs');
const { checkForUpdates } = require('./updater.cjs');

let ws = null;
let reconnectInterval = null;
let heartbeatInterval = null;

// –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è(events) –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø—Ä–æ–ø–∏—Å–∞–ª–∏ –≤ preload.cjs (ipcRenderer.on)
// –¢—Ä–∏–≥–≥–µ—Ä–∏—Ç —Å–æ–±—ã—Ç–∏—è –æ–Ω–∞ –≤ ws.on('message')
function notifyRenderer(channel, data = null) {
  const allWindows = require('electron').BrowserWindow.getAllWindows();
  allWindows.forEach(window => {
    if (window && !window.isDestroyed()) {
      window.webContents.send(channel, data);
    }
  });
}

function startHeartbeat() {
  stopHeartbeat(); // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—â–µ–Ω
  
  heartbeatInterval = setInterval(() => {
    if (ws && ws.readyState === WebSocket.OPEN) {
      ws.send(JSON.stringify({ type: 'heartbeat' }));
    }
  }, 30 * 1000);
}

function stopHeartbeat() {
  if (heartbeatInterval) {
    clearInterval(heartbeatInterval);
    heartbeatInterval = null;
  }
}

function scheduleReconnect() {
  if (reconnectInterval) return;
  
  reconnectInterva—ël = setInterval(() => {
    Logger.info('Attempting to reconnect WebSocket...');
    connectWebSocket();
  }, 10 * 1000);
}

function connectWebSocket() {
  try {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (ws) {
      ws.close();
      ws = null;
    }

    ws = new WebSocket(WS_URL);
    app.ws = ws;

    ws.on('open', () => {
      Logger.info('WebSocket connected to server');
     
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–æ—Å—Ç
      const regMsg = JSON.stringify({
        type: 'register_host',
        computer_name: COMPUTER_NAME
      });
      console.log('Register host message:', regMsg);
      ws.send(regMsg);

      // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      if (reconnectInterval) {
        clearInterval(reconnectInterval);
        reconnectInterval = null;
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º heartbeat
      startHeartbeat();

      // –£–≤–µ–¥–æ–º–ª—è–µ–º renderer –ø—Ä–æ—Ü–µ—Å—Å –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      notifyRenderer('websocket-connected');
    });

    ws.on('message', async (data) => {
      try {
        const message = JSON.parse(data.toString());
        
        switch (message.type) {
          case 'force_update':
            Logger.info('Received force update command from server');
            await checkForUpdates();
            break;

          case 'heartbeat_ack':
            break;

          case 'auth':
            notifyRenderer('auth-response', message);
            break;

          case 'registration':
            notifyRenderer('registration-response', message); // üëà –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
            break;

          default:
            Logger.info(`Received unknown message type: ${message.type}`);
            notifyRenderer('websocket-message', message);
        }

      } catch (error) {
        Logger.error(`Error processing WebSocket message: ${error.message}`);
      }
    });


    ws.on('close', () => {
      Logger.warn('WebSocket connection closed, attempting to reconnect...');
      stopHeartbeat();
      notifyRenderer('websocket-disconnected');
      scheduleReconnect();
    });

    ws.on('error', (error) => {
      Logger.error(`WebSocket error: ${error.message}`);
      stopHeartbeat();
      notifyRenderer('websocket-error', { error: error.message });
      scheduleReconnect();
    });

  } catch (error) {
    Logger.error(`Failed to connect WebSocket: ${error.message}`);
    scheduleReconnect();
  }
}

// IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å renderer –ø—Ä–æ—Ü–µ—Å—Å–æ–º
ipcMain.handle('websocket-send', (event, data) => {
  if (ws && ws.readyState === WebSocket.OPEN) {
    ws.send(JSON.stringify(data));
    return { success: true };
  }
  return { success: false, error: 'WebSocket not connected' };
});

ipcMain.handle('websocket-status', () => {
  return {
    connected: ws && ws.readyState === WebSocket.OPEN,
    readyState: ws ? ws.readyState : WebSocket.CLOSED
  };
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ main –ø—Ä–æ—Ü–µ—Å—Å–µ)
function sendMessage(data) {
  if (ws && ws.readyState === WebSocket.OPEN) {
    ws.send(typeof data === 'string' ? data : JSON.stringify(data));
    return true;
  }
  return false;
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function disconnect() {
  stopHeartbeat();
  if (reconnectInterval) {
    clearInterval(reconnectInterval);
    reconnectInterval = null;
  }
  if (ws) {
    ws.close();
    ws = null;
  }
}

module.exports = {
  connectWebSocket,
  scheduleReconnect,
  sendMessage,
  disconnect
};